import gulp from 'gulp';
import gulpSass from 'gulp-sass';
import * as sass from 'sass';
import cleanCSS from 'gulp-clean-css';
import postcss from 'gulp-postcss';
import autoprefixer from 'autoprefixer';
import babel from 'gulp-babel';
import uglify from 'gulp-uglify';
import pug from 'gulp-pug';
import htmlMin from 'gulp-htmlmin';
import plumber from 'gulp-plumber';
import path from 'path';
import fs from 'fs';
import {fileURLToPath} from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirnamePath = path.dirname(__filename);

const compileSass = gulpSass(sass);

// Загрузка данных пользователей и новостей
const users = JSON.parse(fs.readFileSync(path.join(__dirnamePath, "data/users.json"), "utf8"));
const friends = users.filter(u => users[0].friends.includes(u.id));
const friendIds = friends.map(f => f.id);
const news = JSON.parse(fs.readFileSync(path.join(__dirnamePath, "data/news.json"), "utf8"))
    .filter(news => friendIds.includes(news.userId));

const newsData = news.map(news => {
    const friend = users.find(u => u.id === news.userId);
    return {
        ...news,
        fullName: friend ? friend.fullName : 'Неизвестный'
    };
});

export const styles = () => {
    return gulp.src('public/scss/**/*.scss')
        .pipe(plumber()) // Обработка ошибок
        .pipe(compileSass().on('error', compileSass.logError)) // Компиляция SCSS
        .pipe(postcss([autoprefixer()])) // Добавление вендорных префиксов
        .pipe(cleanCSS()) // Минификация CSS
        .pipe(gulp.dest('dist/gulp/styles/')); // Папка назначения
};

export const scripts = () => {
    return gulp.src('public/js/**/*.js')
        .pipe(plumber()) // Обработка ошибок
        .pipe(babel()) // Транспиляция JS через Babel
        .pipe(uglify()) // Минификация JS
        .pipe(gulp.dest('dist/gulp/scripts/')); // Папка назначения
};

export const views = () => {
    return gulp.src('views/**/*.pug')
        .pipe(plumber()) // Обработка ошибок
        .pipe(pug({locals: {users: users, newsData: newsData, user: users[0], friends: friends}})) // Компиляция Pug с локальными переменными
        .pipe(htmlMin({collapseWhitespace: true})) // Минификация HTML
        .pipe(gulp.dest('dist/gulp/views/')); // Папка назначения
};

export const defaultTask = gulp.series(
    gulp.parallel(styles, scripts, views),
    () => {
        gulp.watch('public/scss/**/*.scss', styles);
        gulp.watch('public/js/**/*.js', scripts);
        gulp.watch(['views/**/*.pug', 'data/**/*.json'], views);
    }
);

export default defaultTask;
