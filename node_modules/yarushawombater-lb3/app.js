import express from 'express';
import path, {dirname} from 'path';
import fs from 'fs';
import bodyParser from 'body-parser';
import methodOverride from 'method-override';
import sassMiddleware from 'node-sass-middleware';
import compression from 'compression';
import morgan from 'morgan';
import dotenv from 'dotenv';
import adminRouter from './routes/admin.js';
import https from 'https';
import {fileURLToPath} from 'url';

dotenv.config();

const __filename = fileURLToPath(import.meta.url);
const __dirnamePath = dirname(__filename);

const app = express();

app.set('views', path.join(__dirnamePath, 'views'));
app.set('view engine', 'pug');

app.use(
    sassMiddleware({
        src: path.join(__dirnamePath, 'public', 'scss'),
        dest: path.join(__dirnamePath, 'public', 'css'),
        outputStyle: 'compressed',
        prefix: '/css',
    })
);
app.use(express.static(path.join(__dirnamePath, 'public')));
app.use(bodyParser.urlencoded({extended: false}));
app.use(bodyParser.json());
app.use(methodOverride('_method'));
app.use(compression());
app.use(morgan('dev'));

app.use('/admin', adminRouter);

app.get('/', (req, res) => {
    res.redirect('/admin/users');
});

app.use((req, res, next) => {
    res.status(404).render('error', {message: 'Страница не найдена', status: 404});
});

app.use((err, req, res, next) => {
    console.error(err.stack);
    res.status(500).render('error', {message: 'Внутренняя ошибка сервера', status: 500});
});

const PORT = process.env.PORT || 3000;

const sslOptions = {
    key: fs.readFileSync(path.join(__dirnamePath, 'ssl', 'server.key')),
    cert: fs.readFileSync(path.join(__dirnamePath, 'ssl', 'server.crt'))
};

if (fs.existsSync(path.join(__dirnamePath, 'ssl', 'server.key')) && fs.existsSync(path.join(__dirnamePath, 'ssl', 'server.crt'))) {
    https.createServer(sslOptions, app).listen(PORT, () => {
        console.log(`HTTPS сервер запущен на порту ${PORT}`);
    });
} else {
    app.listen(PORT, () => {
        console.log(`HTTP сервер запущен на порту ${PORT}`);
        console.warn('SSL сертификаты не найдены. Сервер работает по протоколу HTTP.');
    });
}
