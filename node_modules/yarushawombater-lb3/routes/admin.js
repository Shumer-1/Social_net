import express from 'express';
import {users, findUserById, saveUsers} from '../models/user.js';
import multer from 'multer';
import path from 'path';
import fs from 'fs';
import {fileURLToPath} from 'url';
import {dirname} from 'path';

const router = express.Router();

const __filename = fileURLToPath(import.meta.url);
const __dirnamePath = dirname(__filename);

const storage = multer.diskStorage({
    destination: function (req, file, cb) {
        cb(null, 'public/images/');
    },
    filename: function (req, file, cb) {
        const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);
        const ext = path.extname(file.originalname);
        cb(null, file.fieldname + '-' + uniqueSuffix + ext);
    }
});
const upload = multer({storage: storage});

router.get('/users', (req, res) => {
    res.render('admin/users', {users});
});

router.post('/users', upload.single('photo'), async (req, res) => {
    const {fullName, birthDate, email, role, status} = req.body;

    if (birthDate) {
        const today = new Date();
        today.setHours(0, 0, 0, 0);

        const userBirthDate = new Date(birthDate);
        userBirthDate.setHours(0, 0, 0, 0);

        if (userBirthDate > today) {
            return res.status(400).json({
                message: 'Дата рождения не может быть в будущем.',
                status: 400
            });
        }
    }

    const existingUser = users.find(user => user.email === email);
    if (existingUser) {
        return res.status(400).json({message: 'Пользователь с таким email уже существует.'});
    }

    const newUser = {
        id: users.length > 0 ? users[users.length - 1].id + 1 : 1,
        fullName,
        birthDate,
        email,
        photo: req.file ? `/images/${req.file.filename}` : '/images/default.png',
        role: role || 'user',
        status: status || 'unconfirmed',
        friends: [],
        messages: [],
    };

    users.push(newUser);
    saveUsers();

    res.status(201).json({message: 'Пользователь добавлен успешно.'});
});

router.get('/users/:id/edit', (req, res) => {
    const user = findUserById(req.params.id);
    if (user) {
        res.render('admin/editUser', {user});
    } else {
        res.status(404).render('error', {message: 'Пользователь не найден', status: 404});
    }
});

router.put('/users/:id', upload.single('photo'), (req, res) => {
    const user = findUserById(req.params.id);
    if (user) {
        const {fullName, birthDate, email, role, status, friends} = req.body;

        if (birthDate) {
            const today = new Date();
            today.setHours(0, 0, 0, 0);

            const userBirthDate = new Date(birthDate);
            userBirthDate.setHours(0, 0, 0, 0);

            if (userBirthDate > today) {
                return res.status(400).render('error', {
                    message: 'Дата рождения не может быть в будущем.',
                    status: 400
                });
            }
        }

        user.fullName = fullName || user.fullName;
        user.birthDate = birthDate || user.birthDate;
        user.email = email || user.email;
        user.role = role || user.role;
        user.status = status || user.status;

        if (req.file) {
            if (user.photo && user.photo !== '/images/default.png') {
                const oldPath = path.join(__dirnamePath, '../public', user.photo);
                fs.unlink(oldPath, (err) => {
                    if (err) console.error(err);
                });
            }
            user.photo = `/images/${req.file.filename}`;
        }

        if (friends) {
            if (Array.isArray(friends)) {
                user.friends = friends.map(id => parseInt(id));
            } else if (typeof friends === 'string') {
                user.friends = [parseInt(friends)];
            }
        }

        saveUsers();

        res.redirect('/admin/users');
    } else {
        res.status(404).render('error', {message: 'Пользователь не найден', status: 404});
    }
});

router.delete('/users/:id', (req, res) => {
    const userIndex = users.findIndex(user => user.id === parseInt(req.params.id));
    if (userIndex !== -1) {
        const user = users[userIndex];

        if (user.photo && user.photo !== '/images/default.png') {
            const photoPath = path.join(__dirnamePath, '../public', user.photo);
            fs.unlink(photoPath, (err) => {
                if (err) console.error(err);
            });
        }

        users.splice(userIndex, 1);

        users.forEach(u => {
            u.friends = u.friends.filter(friendId => friendId !== user.id);
        });

        saveUsers();

        res.redirect('/admin/users');
    } else {
        res.status(404).render('error', {message: 'Пользователь не найден', status: 404});
    }
});

router.get('/users/:id/friends', (req, res) => {
    const user = findUserById(req.params.id);
    if (user) {
        const friends = users.filter(u => user.friends.includes(u.id));
        res.render('admin/friends', {user, friends});
    } else {
        res.status(404).render('error', {message: 'Пользователь не найден', status: 404});
    }
});

router.get('/users/:id/news', (req, res) => {
    const user = findUserById(req.params.id);
    if (user) {
        const friends = users.filter(u => user.friends.includes(u.id));
        const friendIds = friends.map(f => f.id);
        const newsData = JSON.parse(fs.readFileSync(path.join(__dirnamePath, '../data/news.json'), 'utf8')).filter(news => friendIds.includes(news.userId));

        const newsWithNames = newsData.map(news => {
            const friend = users.find(u => u.id === news.userId);
            return {
                ...news,
                fullName: friend ? friend.fullName : 'Неизвестный'
            };
        });

        res.render('admin/news', {user, newsData: newsWithNames});
    } else {
        res.status(404).render('error', {message: 'Пользователь не найден', status: 404});
    }
});

export default router;
